// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: service.proto

package streamservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommunicationClient is the client API for Communication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommunicationClient interface {
	Communicate(ctx context.Context, opts ...grpc.CallOption) (Communication_CommunicateClient, error)
}

type communicationClient struct {
	cc grpc.ClientConnInterface
}

func NewCommunicationClient(cc grpc.ClientConnInterface) CommunicationClient {
	return &communicationClient{cc}
}

func (c *communicationClient) Communicate(ctx context.Context, opts ...grpc.CallOption) (Communication_CommunicateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Communication_ServiceDesc.Streams[0], "/streamservice.Communication/Communicate", opts...)
	if err != nil {
		return nil, err
	}
	x := &communicationCommunicateClient{stream}
	return x, nil
}

type Communication_CommunicateClient interface {
	Send(*RpcRequest) error
	Recv() (*RpcResponse, error)
	grpc.ClientStream
}

type communicationCommunicateClient struct {
	grpc.ClientStream
}

func (x *communicationCommunicateClient) Send(m *RpcRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *communicationCommunicateClient) Recv() (*RpcResponse, error) {
	m := new(RpcResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CommunicationServer is the server API for Communication service.
// All implementations must embed UnimplementedCommunicationServer
// for forward compatibility
type CommunicationServer interface {
	Communicate(Communication_CommunicateServer) error
	mustEmbedUnimplementedCommunicationServer()
}

// UnimplementedCommunicationServer must be embedded to have forward compatible implementations.
type UnimplementedCommunicationServer struct {
}

func (UnimplementedCommunicationServer) Communicate(Communication_CommunicateServer) error {
	return status.Errorf(codes.Unimplemented, "method Communicate not implemented")
}
func (UnimplementedCommunicationServer) mustEmbedUnimplementedCommunicationServer() {}

// UnsafeCommunicationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommunicationServer will
// result in compilation errors.
type UnsafeCommunicationServer interface {
	mustEmbedUnimplementedCommunicationServer()
}

func RegisterCommunicationServer(s grpc.ServiceRegistrar, srv CommunicationServer) {
	s.RegisterService(&Communication_ServiceDesc, srv)
}

func _Communication_Communicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CommunicationServer).Communicate(&communicationCommunicateServer{stream})
}

type Communication_CommunicateServer interface {
	Send(*RpcResponse) error
	Recv() (*RpcRequest, error)
	grpc.ServerStream
}

type communicationCommunicateServer struct {
	grpc.ServerStream
}

func (x *communicationCommunicateServer) Send(m *RpcResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *communicationCommunicateServer) Recv() (*RpcRequest, error) {
	m := new(RpcRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Communication_ServiceDesc is the grpc.ServiceDesc for Communication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Communication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "streamservice.Communication",
	HandlerType: (*CommunicationServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Communicate",
			Handler:       _Communication_Communicate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
